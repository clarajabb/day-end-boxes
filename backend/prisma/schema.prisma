generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(uuid())
  phone                   String?       @unique
  name                    String?
  email                   String?       @unique
  passwordHash            String?
  preferredLocale         String        @default("ar")
  notificationPreferences Json          @default("{\"smsEnabled\": true, \"pushEnabled\": true, \"emailEnabled\": false}")
  fcmToken                String?
  isActive                Boolean       @default(true)
  lastLoginAt             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  reservations            Reservation[]
  reviews                 Review[]

  @@index([phone])
  @@index([email])
  @@map("users")
}

model Merchant {
  id              String           @id @default(uuid())
  businessName    String
  contactName     String
  email           String           @unique
  phone           String
  category        MerchantCategory
  address         String
  latitude        Float
  longitude       Float
  description     String?
  businessLicense String?
  profileImage    String?
  operatingHours  Json             @default("{}")
  status          MerchantStatus   @default(PENDING)
  passwordHash    String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  boxInventory    BoxInventory[]
  boxTypes        BoxType[]
  reservations    Reservation[]
  reviews         Review[]

  @@map("merchants")
}

model BoxType {
  id              String         @id @default(uuid())
  merchantId      String
  name            String
  description     String
  originalPrice   Float
  discountedPrice Float
  category        BoxCategory
  allergens       String[]
  dietaryInfo     DietaryInfo[]
  images          String[]       @default([])
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  boxInventory    BoxInventory[]
  merchant        Merchant       @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("box_types")
}

model BoxInventory {
  id                String          @id @default(uuid())
  boxTypeId         String
  merchantId        String
  availableDate     DateTime        @db.Date
  originalQuantity  Int
  remainingQuantity Int
  price             Float
  pickupStartTime   DateTime        @db.Time(6)
  pickupEndTime     DateTime        @db.Time(6)
  status            InventoryStatus @default(ACTIVE)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  boxType           BoxType         @relation(fields: [boxTypeId], references: [id], onDelete: Cascade)
  merchant          Merchant        @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  reservations      Reservation[]

  @@unique([boxTypeId, availableDate])
  @@map("box_inventory")
}

model Reservation {
  id             String            @id @default(uuid())
  userId         String
  boxInventoryId String
  merchantId     String
  status         ReservationStatus @default(ACTIVE)
  pickupCode     String            @unique
  totalAmount    Float
  reservedAt     DateTime
  expiresAt      DateTime
  completedAt    DateTime?
  cancelledAt    DateTime?
  paymentStatus  PaymentStatus     @default(PENDING)
  paymentMethod  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  boxInventory   BoxInventory      @relation(fields: [boxInventoryId], references: [id], onDelete: Cascade)
  merchant       Merchant          @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews        Review?

  @@map("reservations")
}

model Review {
  id            String      @id @default(uuid())
  userId        String
  merchantId    String
  reservationId String      @unique
  rating        Int         @db.SmallInt
  comment       String?
  isVisible     Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  merchant      Merchant    @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Admin {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  passwordHash String
  role         AdminRole @default(MODERATOR)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?

  @@map("admins")
}

model OtpVerification {
  id        String   @id @default(uuid())
  phone     String
  otp       String
  attempts  Int      @default(0)
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("otp_verifications")
}

model RefreshToken {
  id         String   @id @default(uuid())
  userId     String?
  merchantId String?
  adminId    String?
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@map("refresh_tokens")
}

enum MerchantCategory {
  BAKERY
  RESTAURANT
  SUPERMARKET
  CAFE
  GROCERY
}

enum MerchantStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum BoxCategory {
  BAKERY
  RESTAURANT
  SUPERMARKET
  CAFE
  GROCERY
}

enum DietaryInfo {
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  HALAL
}

enum InventoryStatus {
  ACTIVE
  SOLD_OUT
  EXPIRED
}

enum ReservationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}
